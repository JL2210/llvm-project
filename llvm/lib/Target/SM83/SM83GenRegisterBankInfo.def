//===- SM83GenRegisterBankInfo.def -------------------------------*- C++ -*-==//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
/// \file
/// This file defines all the static objects used by SM83RegisterBankInfo.
/// \todo This should be generated by TableGen.
//===----------------------------------------------------------------------===//

namespace llvm {

RegisterBankInfo::PartialMapping SM83GenRegisterBankInfo::PartMappings[]{
    /* StartIdx, Length, RegBank */
    // GPR value
    {0, 8, SM83::GPRRegBank},   // :0
    {0, 16, SM83::GPRRegBank},  // :1
};

#define X3(X) X X X
#define PARTMAP(x) \
{&SM83GenRegisterBankInfo::PartMappings[x - PMI_Min], 1},
// ValueMappings.
RegisterBankInfo::ValueMapping SM83GenRegisterBankInfo::ValMappings[]{
    /* BreakDown, NumBreakDowns */
    // 3-operands instructions (all binary operations should end up with one of
    // those mapping).
    // 0: GPR 8-bit value.
    X3(PARTMAP(PMI_GR8))
    // 3: GPR 16-bit value.
    X3(PARTMAP(PMI_GR16))
};
#undef PARTMAP
#undef X3

const RegisterBankInfo::ValueMapping *
SM83GenRegisterBankInfo::getValueMapping(PartialMappingIdx Idx,
                                         unsigned NumOperands) {
  // We can use VMI_3Ops Mapping for all the cases.
  if (NumOperands <= 3 && (Idx >= PMI_GR8 && Idx <= PMI_GR16))
    return &ValMappings[(unsigned)Idx * 3];

  llvm_unreachable("Unsupported PartialMappingIdx.");
}

}
